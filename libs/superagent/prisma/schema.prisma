generator client {
  provider  = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DATABASE_MIGRATION_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

enum AgentType {
  SUPERAGENT
  OPENAI_ASSISTANT
  LLM
}

enum LLMProvider {
  OPENAI
  AZURE_OPENAI
  HUGGINGFACE
  PERPLEXITY
  TOGETHER_AI
  ANTHROPIC
  BEDROCK
  GROQ
  MISTRAL
  COHERE_CHAT
}

enum LLMModel {
  GPT_3_5_TURBO
  GPT_3_5_TURBO_16K_0613
  GPT_3_5_TURBO_0613
  GPT_3_5_TURBO_1106
  GPT_3_5_TURBO_0125

  GPT_4
  GPT_4_0613
  GPT_4_32K
  GPT_4_32K_0613
  GPT_4_1106_PREVIEW
  GPT_4_0125_PREVIEW
  GPT_4_TURBO
  GPT_4_TURBO_PREVIEW
  GPT_4_TURBO_2024_04_09
  GPT_4_0
  MISTRAL_7B_INSTRUCT_V01
  MIXTRAL_8X7B_INSTRUCT_V01
}

enum ToolType {
  ALGOLIA
  BROWSER
  BING_SEARCH
  REPLICATE
  WOLFRAM_ALPHA
  ZAPIER_NLA
  AGENT
  OPENAPI
  CHATGPT_PLUGIN
  METAPHOR
  PUBMED
  CODE_EXECUTOR
  OPENBB
  GPT_VISION
  TTS_1
  HAND_OFF
  FUNCTION
  HTTP
  SUPERRAG
  RESEARCH
  GITHUB
  SCRAPER
  ADVANCED_SCRAPER
  GOOGLE_SEARCH
  SEC
}

enum DatasourceType {
  TXT
  PDF
  CSV
  PPTX
  XLSX
  DOCX
  GOOGLE_DOC
  YOUTUBE
  GITHUB_REPOSITORY
  MARKDOWN
  WEBPAGE
  AIRTABLE
  STRIPE
  NOTION
  SITEMAP
  URL
  FUNCTION
}

enum DatasourceStatus {
  IN_PROGRESS
  DONE
  FAILED
}

enum VectorDbProvider {
  PINECONE
  ASTRA_DB
  WEAVIATE
  QDRANT
  SUPABASE
}

model ApiUser {
  id              String           @id @default(uuid())
  token           String?
  email           String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  agents          Agent[]
  llms            LLM[]
  datasources     Datasource[]
  tools           Tool[]
  workflows       Workflow[]
  vectorDb        VectorDb[]
  workflowConfigs WorkflowConfig[]
  apiKeys         ApiKey[]
}

model ApiKey {
  id            String   @id @default(uuid())
  name          String
  displayApiKey String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  apiUserId     String
  apiUser       ApiUser  @relation(fields: [apiUserId], references: [id])

  @@index([apiUserId], name: "api_user_id")
}

model Agent {
  id             String            @id @default(uuid())
  type           AgentType         @default(SUPERAGENT)
  name           String
  avatar         String?
  initialMessage String?           @db.Text()
  description    String            @default("Add a agent description...") @db.Text
  isActive       Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  llms           AgentLLM[]
  llmModel       LLMModel?         @default(GPT_3_5_TURBO_16K_0613)
  prompt         String?
  apiUserId      String
  apiUser        ApiUser           @relation(fields: [apiUserId], references: [id])
  datasources    AgentDatasource[]
  tools          AgentTool[]
  workflowSteps  WorkflowStep[]
  metadata       Json?
  outputSchema   String?
}

model Datasource {
  id          String            @id @default(uuid())
  name        String
  content     String?           @db.Text()
  description String?
  url         String?
  type        DatasourceType
  apiUserId   String
  apiUser     ApiUser           @relation(fields: [apiUserId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  metadata    String?           @db.Text
  status      DatasourceStatus  @default(IN_PROGRESS)
  datasources AgentDatasource[]
  vectorDb    VectorDb?         @relation(fields: [vectorDbId], references: [id])
  vectorDbId  String?
}

model AgentDatasource {
  agentId      String
  datasourceId String
  agent        Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  datasource   Datasource @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([agentId, datasourceId])
}

model Tool {
  id           String      @id @default(uuid())
  name         String
  description  String
  type         ToolType
  returnDirect Boolean     @default(false)
  metadata     String?     @db.Text
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  apiUserId    String
  apiUser      ApiUser     @relation(fields: [apiUserId], references: [id])
  tools        AgentTool[]
  toolConfig   Json?
}

model AgentTool {
  agentId   String
  toolId    String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tool      Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([agentId, toolId])
}

model LLM {
  id        String      @id @default(uuid())
  provider  LLMProvider @default(OPENAI)
  apiKey    String
  options   Json?
  agents    AgentLLM[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  apiUserId String
  apiUser   ApiUser     @relation(fields: [apiUserId], references: [id])
}

model AgentLLM {
  agentId   String
  llmId     String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  llm       LLM      @relation(fields: [llmId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([agentId, llmId])
}

model Workflow {
  id              String           @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  steps           WorkflowStep[]
  apiUserId       String
  apiUser         ApiUser          @relation(fields: [apiUserId], references: [id])
  workflowConfigs WorkflowConfig[]
}

model WorkflowConfig {
  id         String   @id @default(uuid())
  config     Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  ApiUser    ApiUser? @relation(fields: [apiUserId], references: [id])
  apiUserId  String?
}

model WorkflowStep {
  id         String   @id @default(uuid())
  order      Int
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  input      String?  @db.Text
  output     String?  @db.Text
  agentId    String
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model VectorDb {
  id          String           @id @default(uuid())
  provider    VectorDbProvider @default(PINECONE)
  options     Json
  datasources Datasource[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  apiUserId   String
  apiUser     ApiUser          @relation(fields: [apiUserId], references: [id])
}

// ============================================================================
// AETH-SCHEMA-001 :: AetheroOS Database Schema Extension
// Minister: Archivus (Memory and database operations)
// Purpose: Extend Superagent Prisma schema with AetheroOS ministerial tables
// Constitutional Compliance: All tables include constitutional audit fields
// ============================================================================

// AetheroOS Ministerial Sessions
model AetheroSession {
  id                    String   @id @default(cuid())
  sessionId            String   @unique
  userId               String?
  userAgent            String?
  ipAddress            String?
  
  // Ministerial routing
  primaryMinister      AetheroMinister
  involvedMinisters    AetheroMinister[]
  
  // ASL Processing
  aslInput            String?
  aslParsed           Json?
  aslValid            Boolean @default(false)
  
  // Session state
  status              AetheroSessionStatus @default(ACTIVE)
  lastActivity        DateTime @default(now())
  
  // Constitutional compliance
  constitutionalHash  String
  auditTrail          AetheroAuditRecord[]
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  endedAt             DateTime?
  
  // Relations
  memoryRecords       AetheroMemoryRecord[]
  cognitiveEvents     AetheroCognitiveEvent[]
  
  @@map("aethero_sessions")
}

// AetheroOS Memory Records
model AetheroMemoryRecord {
  id                  String   @id @default(cuid())
  recordId           String   @unique
  
  // Content
  content            String
  contentHash        String
  embeddings         Float[]
  
  // Classification
  memoryType         AetheroMemoryType
  minister           AetheroMinister
  category           String?
  tags               String[]
  
  // Metadata
  metadata           Json @default("{}")
  importance         Int @default(5) // 1-10 scale
  
  // Relations
  sessionId          String?
  session            AetheroSession? @relation(fields: [sessionId], references: [id])
  
  // Constitutional compliance
  constitutionalHash String
  complianceChecked  Boolean @default(false)
  
  // Timestamps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  expiresAt          DateTime?
  
  @@map("aethero_memory_records")
  @@index([minister, memoryType])
  @@index([contentHash])
}

// AetheroOS Cognitive Events
model AetheroCognitiveEvent {
  id                 String   @id @default(cuid())
  eventId           String   @unique
  
  // Event details
  eventType         AetheroCognitiveEventType
  minister          AetheroMinister
  description       String
  
  // Processing data
  inputData         Json?
  outputData        Json?
  processingTime    Float
  success           Boolean
  errorMessage      String?
  
  // Context
  sessionId         String?
  session           AetheroSession? @relation(fields: [sessionId], references: [id])
  parentEventId     String?
  childEvents       AetheroCognitiveEvent[] @relation("CognitiveEventHierarchy")
  parentEvent       AetheroCognitiveEvent? @relation("CognitiveEventHierarchy", fields: [parentEventId], references: [id])
  
  // Constitutional compliance
  constitutionalHash String
  auditRequired     Boolean @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  @@map("aethero_cognitive_events")
  @@index([minister, eventType])
  @@index([sessionId])
}

// AetheroOS Constitutional Audit Records
model AetheroAuditRecord {
  id                String   @id @default(cuid())
  auditId          String   @unique
  
  // Audit details
  auditType        AetheroAuditType
  minister         AetheroMinister?
  action           String
  description      String
  
  // Data integrity
  dataHash         String
  digitalSignature String
  timestamp        DateTime @default(now())
  
  // Compliance status
  complianceStatus AetheroComplianceStatus
  violationLevel   AetheroViolationLevel?
  remedialAction   String?
  
  // Relations
  sessionId        String?
  session          AetheroSession? @relation(fields: [sessionId], references: [id])
  
  // Immutable audit trail
  previousAuditId  String?
  nextAuditId      String?
  
  @@map("aethero_audit_records")
  @@index([minister, auditType])
  @@index([complianceStatus])
  @@index([timestamp])
}

// AetheroOS Ministerial Configuration
model AetheroMinisterConfig {
  id               String   @id @default(cuid())
  minister         AetheroMinister @unique
  
  // Configuration
  isActive         Boolean @default(true)
  capabilities     String[]
  restrictions     String[]
  
  // Performance settings
  maxConcurrency   Int @default(10)
  timeoutSeconds   Int @default(30)
  retryAttempts    Int @default(3)
  
  // Integration settings
  bridgeConfig     Json @default("{}")
  endpointConfig   Json @default("{}")
  
  // Constitutional compliance
  constitutionalVersion String @default("AETH-CONST-2025-001")
  lastComplianceCheck   DateTime @default(now())
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("aethero_minister_configs")
}

// AetheroOS System Metrics
model AetheroSystemMetric {
  id              String   @id @default(cuid())
  
  // Metric details
  metricName      String
  metricValue     Float
  metricUnit      String?
  minister        AetheroMinister?
  
  // Context
  category        String
  tags            String[]
  metadata        Json @default("{}")
  
  // Aggregation
  aggregationType AetheroMetricAggregation @default(POINT)
  timeWindow      String?
  
  // Timestamps
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())
  
  @@map("aethero_system_metrics")
  @@index([metricName, timestamp])
  @@index([minister, category])
}

// ============================================================================
// ENUMS for AetheroOS Types
// ============================================================================

enum AetheroMinister {
  PRIMUS      // Strategic logic and parsing
  LUCIUS      // Execution and backend
  ARCHIVUS    // Memory and constitutional audit
  FRONTINUS   // Interface and visualization
}

enum AetheroSessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ERROR
  TERMINATED
}

enum AetheroMemoryType {
  STRUCTURED      // Database records
  UNSTRUCTURED    // Vector embeddings
  CONSTITUTIONAL  // Audit records
  MINISTERIAL     // Inter-minister communication
  SESSION         // User session data
  SYSTEM          // System state
}

enum AetheroCognitiveEventType {
  ASL_PARSING
  STRATEGIC_ANALYSIS
  TASK_EXECUTION
  MEMORY_RETRIEVAL
  MEMORY_STORAGE
  INTERFACE_UPDATE
  BRIDGE_COMMUNICATION
  ERROR_HANDLING
  CONSTITUTIONAL_CHECK
}

enum AetheroAuditType {
  SESSION_START
  SESSION_END
  MEMORY_ACCESS
  MINISTER_COMMUNICATION
  CONSTITUTIONAL_VIOLATION
  SYSTEM_CHANGE
  DATA_MODIFICATION
  BRIDGE_OPERATION
}

enum AetheroComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
  REMEDIATED
}

enum AetheroViolationLevel {
  MINOR
  MODERATE
  MAJOR
  CRITICAL
}

enum AetheroMetricAggregation {
  POINT       // Single point value
  SUM         // Aggregated sum
  AVERAGE     // Aggregated average
  MAX         // Maximum value
  MIN         // Minimum value
  COUNT       // Count of events
}
